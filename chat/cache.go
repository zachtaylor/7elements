// Code generated by go-jenny(taylz.io/cmd/go-jenny@v0.0.0) DO NOT EDIT.

package chat

import (
	"sync"
)

// Cache is an observable concurrent in-memory datastore
type Cache struct {
	dat map[string]*Room
	mu  sync.Mutex
	obs []CacheObserver
}

// CacheGetter is a func(string)->*Room
type CacheGetter = func(string) *Room

// CacheObserver is a func(string, old*Room, new*Room)
type CacheObserver = func(string, *Room, *Room)

// CacheSetter is a func(string,*Room)
type CacheSetter = func(string, *Room)

// NewCache returns a new Cache
func NewCache() *Cache {
	return &Cache{
		dat: make(map[string]*Room),
		obs: make([]CacheObserver, 0),
	}
}

// Get returns the *Room for a string
func (this *Cache) Get(k string) *Room { return this.dat[k] }

// Set saves a *Room for a string
func (this *Cache) Set(k string, v *Room) {
	this.mu.Lock()
	this.set(k, v)
	this.mu.Unlock()
}

func (this *Cache) set(k string, v *Room) {
	old := this.dat[k]
	if v != nil {
		this.dat[k] = v
	} else {
		delete(this.dat, k)
	}
	for _, f := range this.obs {
		f(k, old, v)
	}
}

// Each calls the func for each string,*Room in this Cache
func (this *Cache) Each(f CacheSetter) {
	this.mu.Lock()
	for k, v := range this.dat {
		f(k, v)
	}
	this.mu.Unlock()
}

// Sync calls the func within the cache lock state
func (this *Cache) Sync(f func(CacheGetter, CacheSetter)) {
	this.mu.Lock()
	f(this.Get, this.set)
	this.mu.Unlock()
}

// Keys returns a new slice with all the string keys
func (this *Cache) Keys() []string {
	this.mu.Lock()
	keys := make([]string, 0, len(this.dat))
	for k := range this.dat {
		keys = append(keys, k)
	}
	this.mu.Unlock()
	return keys
}

// Observe adds a func to be called when a *Room is set
func (this *Cache) Observe(f CacheObserver) { this.obs = append(this.obs, f) }

// Remove deletes a string,*Room
func (this *Cache) Remove(k string) { this.Set(k, nil) }
